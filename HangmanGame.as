package {public class HangmanGame{		/*Instance properties*/				private var dictionary: Dictionary;		private var arrayFunctions: ArrayFunctions;	//NUMBER_STRIKES is an int that contains the allowed number of strikes and is assigned the value of 7	private var NUMBER_STRIKES:int = 7;	//currentWordArray is an Array of Strings, where the value at index i is a single letter in the hidden word	private var currentWordArray:Array= new Array();	//currentWordArray ;	//currentGuessArray is an Array of Booleans, where the value at index i is true if the user has correctly guessed the letter at that index	private var currentGuessArray:Array;	//currentGuessArray = new Array;	//strikes is an int that holds the current number of strikes against the player	private var strikes:int;	public function HangmanGame()		{			// constructor code			dictionary = new Dictionary();			arrayFunctions = new ArrayFunctions();			initGame();		}					public function initGame():void	{		//initialization of the game logic		//number of strikes against the player needs to be set to 0		//randomly choose a word from the "dictionary" (you make your own "dictionary" of 5 words)		//assign variables accordingly		strikes = 0;		var chosenWord:String = dictionary.randomWord();		currentWordArray = arrayFunctions.string2Array(chosenWord);		trace(chosenWord);			//invoke initGuess function		initGuess();	}	public function initGuess():void	{		//helper" function for initGame that creates a new Array for the currentGuessArray variable 		//and initializes all the slots to false (nothing has been guessed yet)		currentGuessArray = new Array(currentWordArray.length);		for (var i:int = 0; i < currentGuessArray.length; i++)		{			currentGuessArray[i] = false;		}		trace( currentGuessArray );	}	public function guessLetter(current:String):void	{		trace("function");		//declare variable named correct of type Boolean		var correct:Boolean;		//this should update the currentGuessArray variable by checking the currentWordArray			for (var i:int = 0; i < currentWordArray.length; i++)		{			//if the letter guessed is the letter at index i of currentWordArray			//assign value true to index i of currentWordArray			//assign value true to variable correct			if (currentWordArray[i] == current )			{				currentGuessArray[i] = true;				trace(currentWordArray[i] + " printing guess letter");				correct = true;							//invoke function getCurrentGuessArray				getCurrentGuessArray();			}		}		//if the letter was not found, the number of strikes should be updated			if (correct == false)		{					strikes++;			trace(strikes);				}		}	public function getCurrentGuessArray():String	{		//the returned String has ? for unrevealed letters		//this function should "walk over" the currentWordArray and currentGuessArray Arrays and create the String accordingly			trace(currentGuessArray);		var word:String = "";		for (var i:int = 0; i< currentGuessArray.length; i++)		{			//if there is a false at index i in currentGuessArray, then a ? should appear			if (currentGuessArray[i] == false)			{				word = word + "?";									}			//if there is a true at index i in currentGuess, then the value of the ith slot in currentWordArray should appear			else			{				word = word + currentWordArray[i];							trace(word + "!");			}		}		return word;	}	public function numberOfStrikes():int	{		//returns an int of the number of strikes against the player so far		var numStrikes:int = strikes;		return numStrikes;	}	public function numberOfRemainingStrikes():int	{		//returns an int of the number of remaining strikes the player has left		var remainingStrikes:int = NUMBER_STRIKES - numberOfStrikes();			trace (remainingStrikes);		return remainingStrikes;		}	public function getAnswer():String	{		//takes no parameters and returns a String that is the hidden word		return arrayFunctions.array2String(currentWordArray);	}	//gameOver takes no parameters and returns a Boolean that is true if the game is over (either won or lost)	public function gameOver():Boolean	{		//if game won, make the win screen appear and return true		if (gameWon() == true)		{			trace ("won");						return true;		}		//or if remaining strikes = 0, make the lose screen appear and return true		else if (numberOfRemainingStrikes() == 0)		{						return true;		}		else		{			return false;		}	}	//gameWon takes no parameters and returns a Boolean that is true if the player has won (guessed all the letters in the word)	public function gameWon():Boolean	{		for (var i:int =0; i <currentGuessArray.length; i++)		{			//if currentGuessArray at index i is false, return false			if (currentGuessArray[i] == false)			{				return false;			}		}		return true;	}}}